#!/usr/bin/python
# $Id: qps_create_site,v 1.5 2004/03/19 17:30:39 ods Exp $

import sys, os
sys.path.append('..')  # let it work without installation
from qps.qUtils import interpolateString

python_executable = os.path.normpath(sys.executable)

def indent(text, level=1):
    return '\n'.join([' '*4*level+line for line in text.split('\n')])

def escapeSQ(text):
    return text.replace("'", r"\'")

def mkdir(path):
    if not os.path.isdir(path):
        os.makedirs(path)

SITE_TMPL = '''\
%(setlocale)s\
%(site_imports)s
from qps import qSite

class Site(qSite.Site):

    title = '%(escapeSQ(title))s'
    makeRoot = '%(escapeSQ(make_dir))s'
    templateDirs = ['%(escapeSQ(make_templates_dir))s']
%(indent(stream_descs))s\
%(indent(field_descs))s\
%(indent(db_params))s
'''

LOCALE_TMPL = '''\
import locale
locale.setlocale(locale.LC_ALL, '%(escapeSQ(options.locale))s')

'''

STREAM_DESCS_IMPORTS = '''\
from qps.qUtils import DictRecord
'''

STREAM_DESCS_TMPL = '''\
streamDescriptions = {
    'static_stream_example': DictRecord(
        title='Static stream title',
        streamClass='qps.qBricks.qStatic.StaticStream',
        itemListSpec = [
            ('id1', {'title': 'First item title'}),
            ('id2', {'title': 'Second item title'}),
        ],
        permissions=[('all', 'rx')]),
    #'sql_stream_example': DictRecord(
    #    title='SQL stream example',
    #    tableName='stream_table',
    #    condition='',  # raw SQL condition to place into WHERE clause
    #    order='id',
    #    indexNum=10,   # number of items on page
    #    streamCat='sql_stream_template_category',
    #    streamClass='qps.qBricks.qSQL.SQLStream',
    #    permissions=[('editor', 'rwxcd'), ('all', 'rx')]),
}
'''

from optparse import OptionParser
parser = OptionParser(usage='%prog [options] site_root')
parser.add_option('-f', '--force', action='store_true', dest='force',
                  help='overwrite existing files')
parser.add_option('-l', '--locale', dest='locale', metavar='LOCALE',
                  help='set locale for site to LOCALE')
parser.add_option('-s', '--size', dest='size',
                  choices=['tiny', 'small', 'normal', 'large'],
                  help='choose site size: tiny, small, normal (default), or '\
                       'large')
(options, args) = parser.parse_args()
try:
    site_root, = args
except ValueError:
    parser.error('incorrect number of arguments')

site_root = os.path.normpath(os.path.abspath(site_root))
make_dir = os.path.normpath(site_root+'/www')
make_templates_dir = os.path.normpath(site_root+'/templates')
code_dir = os.path.normpath(site_root+'/code')

map(mkdir, (site_root, make_dir, make_templates_dir, code_dir))

if options.locale is None:
    setlocale = ''
else:
    setlocale = interpolateString(LOCALE_TMPL, vars())

stream_descs_type, field_descs_type = {
    'tiny'  : ('inline', 'inline'),
    'small' : ('inline', 'module'),
    'normal': ('module', 'module'),
    'large' : ('module', 'package'),
}.get(options.size, ('module', 'module'))

site_imports = ''

if stream_descs_type=='inline':
    site_imports += STREAM_DESCS_IMPORTS
    stream_descs = interpolateString(STREAM_DESCS_TMPL, vars())
else:
    stream_descs = 'from streamDescriptions import streamDescriptions'

# field_descs_type
